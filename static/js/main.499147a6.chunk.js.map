{"version":3,"sources":["Cell.tsx","Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cell","this","props","x","y","cellStyle","style","left","CELL_SIZE","top","width","height","className","React","Component","Game","state","cells","interval","isRunning","frequency","saved","rows","cols","board","boardRef","timeoutHandler","makeEmptyBoard","rect","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","event","elemOffSet","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","setState","makeCells","push","map","b","slice","runIteration","newBoard","i","j","n","getNeighbors","setTimeout","k","l","filter","v","length","clearTimeout","target","value","background","random","onClick","e","handleClick","ref","backgroundSize","c","key","onChange","handleIntervalChange","stopGame","runGame","clear","undo","handleFrequencyChange","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.499147a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport {CELL_SIZE} from \"./Game\";\r\nexport default class Cell extends React.Component<any, any> {\r\n\r\n    render() {\r\n        const { x, y, style } = this.props;\r\n        let cellStyle = {style, left: `${CELL_SIZE * x + 1}px`,top: `${CELL_SIZE * y + 1}px`,width: `${CELL_SIZE - 1}px`,height: `${CELL_SIZE - 1}px`      }\r\n        return (\r\n            <div className=\"Cell\" style={cellStyle} />\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Game.css'\r\nimport Cell from \"./Cell\";\r\n\r\nexport const CELL_SIZE = 20;\r\nconst WIDTH = 800;\r\nconst HEIGHT = 600;\r\n\r\nclass Game extends React.Component<any, any>{\r\n    state: {cells: {x: number, y: number, style: any}[], interval: number, isRunning: boolean, frequency: number} = {\r\n        cells: [],\r\n        interval: 100,\r\n        isRunning: false,\r\n        frequency: 20\r\n    }\r\n    saved: boolean[][] = [[]];\r\n    rows: number;\r\n    cols: number;\r\n    board: any;\r\n    boardRef: any;\r\n    timeoutHandler: any\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.rows = HEIGHT/CELL_SIZE;\r\n        this.cols = WIDTH/CELL_SIZE;\r\n        this.board = this.makeEmptyBoard();\r\n    }\r\n\r\n    getElementOffset() {\r\n        const rect = this.boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n        return {\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop\r\n        }\r\n    }\r\n\r\n    handleClick(event: any) {\r\n        const elemOffSet = this.getElementOffset();\r\n        const offsetX = event.clientX - elemOffSet.x;\r\n        const offsetY = event.clientY - elemOffSet.y;\r\n        const x = Math.floor(offsetX / CELL_SIZE);\r\n        const y = Math.floor(offsetY/CELL_SIZE);\r\n        if(x >= 0 && x <= this.cols && y >= 0 && y <= this.rows){\r\n            this.board[y][x] = !this.board[y][x];\r\n        }\r\n        this.setState({\r\n            cells: this.makeCells()\r\n        })\r\n    }\r\n    clear() {\r\n        this.board = this.makeEmptyBoard();\r\n        this.setState({\r\n            cells: this.makeCells()\r\n        })\r\n    }\r\n    makeEmptyBoard() {\r\n        let board: boolean[][] = [];\r\n        for(let y = 0; y < this.rows; y++){\r\n            board.push([]);\r\n            for(let x = 0; x < this.cols; x++){\r\n                board[y][x] = false;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n    runGame() {\r\n        this.saved = this.board.map((b: boolean[]) => b.slice());\r\n        this.setState({\r\n            isRunning: true\r\n        })\r\n        this.runIteration();\r\n    }\r\n    runIteration() {\r\n        let newBoard = this.makeEmptyBoard();\r\n        for(let i = 0; i < this.rows; i++){\r\n            for(let j = 0; j < this.cols; j++){\r\n                let n = this.getNeighbors(this.board, i, j);\r\n                if(this.board[i][j]){\r\n                    newBoard[i][j] = n === 2 || n === 3;\r\n                }else {\r\n                    if(n === 3){\r\n                        newBoard[i][j] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.board = newBoard;\r\n        this.setState({\r\n            cells: this.makeCells()\r\n        })\r\n        this.timeoutHandler = window.setTimeout(() => {\r\n            this.runIteration()\r\n        }, this.state.interval)\r\n    }\r\n    getNeighbors(board: boolean[][], i: number, j: number){\r\n        let n = [];\r\n        for(let k = -1; k < 2; k++){\r\n            for(let l = -1; l < 2; l++){\r\n                if(k=== 0 && l === 0){\r\n                    continue;\r\n                }\r\n                if(board[i + k]){\r\n                    n.push(board[i+k][j+l]);\r\n                }\r\n            }\r\n        }\r\n        return n.filter(v => v).length;\r\n    }\r\n    stopGame() {\r\n        this.setState({\r\n            isRunning: false\r\n        })\r\n        if(this.timeoutHandler) {\r\n            clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n\r\n    handleIntervalChange(event: any) {\r\n        this.setState({\r\n            interval: event.target.value\r\n        })\r\n    }\r\n    makeCells() {\r\n        let cells = [];\r\n        for(let y = 0; y < this.rows; y++){\r\n            for(let x = 0; x < this.cols; x++){\r\n                if(this.board[y][x]){\r\n                    cells.push({x,y, style: {background: \"green\"}});\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    random(){\r\n        let newBoard = this.makeEmptyBoard();\r\n        for(let i = 0; i < this.rows; i++) {\r\n            for(let j = 0; j < this.cols; j++){\r\n                let v = Math.floor(Math.random() * Math.floor(100));\r\n                newBoard[i][j] = v < this.state.frequency;\r\n            }\r\n        }\r\n        this.board = newBoard;\r\n        this.setState({\r\n            cells: this.makeCells()\r\n        })\r\n    }\r\n    handleFrequencyChange(event: any){\r\n        this.setState({\r\n            frequency: event.target.value\r\n        })\r\n    }\r\n    undo(){\r\n        this.board = this.saved;\r\n        this.setState({\r\n            cells: this.makeCells()\r\n        })\r\n    }\r\n    render() {\r\n        const {cells} = this.state;\r\n        return (\r\n            <div>\r\n                <div onClick={(e) => this.handleClick(e)} ref={(n) => {this.boardRef = n}} className=\"Board\" style={{width: WIDTH, height: HEIGHT, backgroundSize: `${CELL_SIZE}px ${CELL_SIZE}px`}}>\r\n                    {cells.map((c) => {\r\n                        return (\r\n                            <Cell style={c.style} x={c.x} y={c.y} key={`${c.x},${c.y}`}/>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div className=\"controls\">\r\n                    Update every <input onChange={(e) => this.handleIntervalChange(e)} value={this.state.interval}/> ms\r\n                    {this.state.isRunning ? <button className=\"button\" onClick={() => this.stopGame()}>Stop</button> :\r\n                        <button className=\"button\" onClick={() => this.runGame()}>Run</button>}\r\n                        <button className=\"button\" onClick={() => this.clear()}>Clear</button>\r\n                        <button className=\"button\" onClick={() => this.undo()}>Undo</button>\r\n                        <button className=\"button\" onClick={() => this.random()}>Random</button>\r\n                        <input onChange={(e) => this.handleFrequencyChange(e)} value={this.state.frequency}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Game';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Game/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}